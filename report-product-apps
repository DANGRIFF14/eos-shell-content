#!/usr/bin/python3
# Note: use python3 for direct support of utf-8 strings

# This script requires python3 polib
# (sudo apt-get install python3-polib)

import apt_pkg
import argparse
import csv
import json
import os
import polib
import sys
import urllib.request

apt_pkg.init_system()

CONTENT_JSON = 'content/Default/apps/content.json'
PO_DIR = 'po'
LOCALES = {'ar'    : {'lang': 'ar'    , 'personality': 'Arabic' ,
                      'app_locales': {'ar', 'en'}},
           'en'    : {'lang': 'C'     , 'personality': 'Global' ,
                      'app_locales': {'en'}},
           'es'    : {'lang': 'es'    , 'personality': 'Spanish' ,
                      'app_locales': {'es'}},
           'es_GT' : {'lang': 'es'    , 'personality': 'Guatemala' ,
                      'app_locales': {'es_GT', 'es'}},
           'fr'    : {'lang': 'fr'    , 'personality': 'Haiti' ,
                      'app_locales': {'fr', 'en'}},
           'pt_BR' : {'lang': 'pt_BR' , 'personality': 'Brazil' ,
                      'app_locales': {'pt_BR', 'pt'}}}
SERVERS = {'production' : 'https://appupdates.endlessm.com',
           'staging'    : 'https://staging.appupdates.endlessm.com',
           'master'     : 'https://master.appupdates.endlessm-sf.com'}
ARCHS = {'i386', 'armhf'}

REMAPPED_IDS = {'eos-file-manager' : {'id': 'org.gnome.Nautilus',
                                      'first_version': '2.6.0'},
                'gedit'            : {'id': 'org.gnome.gedit',
                                      'first_version': '2.6.0'},
                'nautilus'         : {'id': 'org.gnome.Nautilus',
                                      'first_version': '2.6.0',
                                      'ignore_before': True},
                'totem'            : {'id': 'org.gnome.Totem',
                                      'first_version': '2.6.0'}}

ALREADY_USED = 'used'

# The image builder uses unusual values for booleans in the apps.txt file
class ImageBuilder:
    YES = 1
    NO = 2

class Color:
    GREEN = '\033[1;32m'
    BLUE = '\033[1;34m'
    YELLOW = '\033[1;33m'
    RED = '\033[1;31m'
    END = '\033[0m'

def get_color_str(text, color):
    return color + str(text) + Color.END

class AttributeDict(dict):
    def __getattr__(self, attr):
        return self[attr]
    def __setattr__(self, attr, value):
        self[attr] = value

def make_attribute_dicts(dicts):
    attribute_dicts = []
    for d in dicts:
        attribute_dicts.append(AttributeDict(d))
    return attribute_dicts

def warn(message):
    print(get_color_str(message, Color.YELLOW), file=sys.stderr)
    
def exit_with_error(message):
    print(get_color_str(message, Color.RED), file=sys.stderr)
    print('Terminating early', file=sys.stderr)
    exit(1)

# For Endless apps, try removing the trailing locale ('-xx' or '-xx_YY')
# from the app id
def strip_locale(app_id):
    if not app_id.startswith('com.endlessm.'):
        return None
    if app_id[len(app_id) - 3] == '-':
        return app_id[0 : len(app_id) - 3]
    if app_id[len(app_id) - 3] == '_' and app_id[len(app_id) - 6] == '-':
        return app_id[0 : len(app_id) - 6]
    return None

class Reporter(object):
    def __init__(self, args):
        # Keep a copy of the arguments dictionary
        self._args = args

        # Check the version number format
        version = self._args.os_version.split('.')
        if len(version) != 3 \
           or not version[0].isdigit() \
           or not version[1].isdigit() \
           or not version[2].isdigit():
            exit_with_error('Invalid OS version number: %s (should be x.y.z)' %
                            self._args.os_version)

        # Check the architecture format
        if self._args.arch not in ARCHS:
            exit_with_error('Unsupported arch: %s' % self._args.arch)

        try:
            self._lang = LOCALES[self._args.locale]['lang']
        except:
            exit_with_error('Unsupported locale: %s' % self._args.locale)
        self._print_debug('Language for translations: %s' % self._lang)

        # Open the .po file
        if self._lang != 'C':
            po_file = os.path.join(PO_DIR, self._lang + '.po')
            self._po = polib.pofile(po_file)
            
        # Load the content json data from file
        with open(CONTENT_JSON) as json_file:
            self._json_data = json.load(json_file)

        # Get the personality name (for filtering by the app server)
        try:
            personality = LOCALES[self._args.locale]['personality']
        except:
            exit_with_error('Unsupported locale: %s' % self._args.locale)
        self._print_debug('App server personality: %s' % personality)

        # Get the base URL for the app server
        try:
            server_url = SERVERS[self._args.server]
        except:
            exit_with_error('Unsupported app server: %s' % self._args.server)

        full_url = '%s/api/v1/updates/%s?arch=%s&personality=%s' % (
            server_url, self._args.os_version, self._args.arch, personality)
        self._print_debug('App server request URL: %s' % server_url)

        # Load the server json data
        request = urllib.request.Request(
            full_url, headers={'Accept': 'application/json'})
        response = urllib.request.urlopen(request)
        self._server_json = json.loads(response.read().decode('utf8'))

    def _print_debug(self, message):
        if self._args.debug:
            print(message)

    def _get_installed_size(self, app_id, version):
        for json_row in self._server_json:
            if json_row['appId'] == app_id and \
               json_row['codeVersion'] == version:
                return json_row['installedSize']
        return 'N/A'
        
    def _do_get_json_row(self, app_id):
        for json_row in self._json_data:
            if json_row['application-id'] == app_id:
                if ALREADY_USED in json_row:
                    return ALREADY_USED
                json_row[ALREADY_USED] = True
                return json_row
        
    def _get_json_row(self, app_id):
        json_row = self._do_get_json_row(app_id)
        if json_row == ALREADY_USED:
            self._print_debug('Already used data for %s' % app_id)
            return ALREADY_USED
        if json_row:
            self._print_debug('Found data for %s' % app_id)
            return json_row
        generic_id = strip_locale(app_id)
        if generic_id:
            json_row = self._do_get_json_row(generic_id)
            if json_row == ALREADY_USED:
                self._print_debug('Already used data for %s as %s' %
                                  (app_id, generic_id))
                return ALREADY_USED
            if json_row:
                self._print_debug('Found data for %s as %s' %
                                  (app_id, generic_id))
                return json_row
        self._print_debug('No data found for %s' % app_id)
        return None

    def _translate(self, val):
        entry = self._po.find(val)
        if entry:
            translation = entry.msgstr
        else:
            self._print_debug('Missing translation: %s' % val)
            translation = ''
        return translation

    def _open_csv_file(self):
        csv_filename = 'apps-list-%s-%s-%s-%s.csv' % (
            self._args.os_version, self._args.server,
            self._args.arch, self._args.locale)
        self._print_debug('Starting CSV output file: %s' % csv_filename)
        self._csv_file = open(csv_filename, 'w', newline='')
        self._csv_writer = csv.writer(self._csv_file, lineterminator='\n')
        csv_header = []
        csv_header.append('App Type')
        csv_header.append('Category')
        csv_header.append('App ID')
        csv_header.append('Version')
        csv_header.append('Size (MB)')
        csv_header.append('Title')
        csv_header.append('Subtitle')
        csv_header.append('Description')
        if self._lang != 'C':
            csv_header.append('Title[%s]' % self._lang)
            csv_header.append('Subtitle[%s]' % self._lang)
            csv_header.append('Description[%s]' % self._lang)
        self._csv_writer.writerow(csv_header)

    def _close_csv_file(self):
        self._csv_file.close()

    def _write_csv_row(self, app_type, app_id, version, extra, split, json_row):
        category = json_row['category']
        size = json_row['size']
        if isinstance(size, str):
            size_string = size
        elif size == 0:
            size_string = 'Unknown'
        else:
            # Convert to MB and round to 1 decimal place
            size_string = '%.1f' % (size / 1000000)
        title = json_row['title']
        subtitle = json_row['subtitle']
        description = json_row['description']
        csv_row = []
        csv_row.append(app_type)
        csv_row.append(category)
        csv_row.append(app_id)
        csv_row.append(version)
        csv_row.append(size_string)
        csv_row.append(title)
        csv_row.append(subtitle)
        csv_row.append(description)
        if self._lang != 'C':
            csv_row.append(self._translate(title))
            csv_row.append(self._translate(subtitle))
            csv_row.append(self._translate(description))
        self._csv_writer.writerow(csv_row)

    def _package_to_app_ids(self, package):
        # HACK: While there is no guarantee that the package name
        # corresponds directly with the app ID, for most our
        # existing core apps that is the case, and using this
        # assumption avoids the need to maintain a look-up table
        # between package names and app IDs.
        # However, starting with 2.6.0, we now have GNOME apps
        # such as nautilus that have app IDs such as org.gnome.Nautilus.
        # This function maps from package name to app ID,
        # both as it exists in the JSON file (json_id)
        # and as it was in the OS version being reported (report_id).
        # Note that this hack will lose alphabetical order
        # by app ID in the resulting CSV file.

        if package not in REMAPPED_IDS:
            # For any app IDs that have not been remapped,
            # assume that the app ID is the package name
            report_id = package
            json_id = package
            return report_id, json_id

        mapping = REMAPPED_IDS[package]

        # Use the new app ID to index the JSON file
        json_id = mapping['id']

        if apt_pkg.version_compare(self._args.os_version,
                                   mapping['first_version']) < 0:

            # For OS versions before the app ID remapping,
            # report the old app ID (i.e., the package name)
            report_id = package

            if mapping.get('ignore_before', False):
                # This older package is not exposed as the app,
                # so ignore it (i.e., don't try to map it to
                # an entry in the JSON file)
                # (e.g., the older virtual package nautilus,
                # back when we had rebranded as eos-file-manager)
                json_id = package

        else:
            # For OS versions after the app ID remapping,
            # report the new app ID
            report_id = json_id

        return report_id, json_id

    def _list_core_apps(self):
        # Read in the list of core packages
        if not self._args.packages_file.endswith('packages.txt'):
            exit_with_error('Packages file name %s does not end with '
                            'packages.txt' % self._args.packages_file)
        try:
            with open(self._args.packages_file, 'r') as f:
                for line in f:
                    data = line.split()
                    package_name = data[0]
                    report_id, json_id = self._package_to_app_ids(package_name)
                    version = data[1]
                    extra = False
                    split = False
                    json_row = self._get_json_row(json_id)
                    if json_row == ALREADY_USED:
                        exit_with_error('Unexpected duplicate entry for %s' %
                                        json_id)
                    if json_row:
                        json_row['size'] = 'System App'
                        self._write_csv_row('Core', report_id, version,
                                            extra, split, json_row)
                    # If no json data found, we can simply assume that
                    # this is a core package for which we don't expose
                    # a desktop application

        except IOError as err:
            exit_with_error('Could not open packages file %s:\n%s'
                            % (self._args.packages_file, err))

    def _list_installed_bundles(self):
        # Read in the list of app bundles
        if not self._args.apps_file.endswith('apps.txt'):
            exit_with_error('Apps file name %s does not end with apps.txt' %
                            self._args.apps_file)
        try:
            with open(self._args.apps_file, 'r') as f:
                for line in f:
                    data = line.split()
                    app_id = data[0]
                    version = data[1]
                    extra = data[2] == ImageBuilder.YES
                    split = data[3] == ImageBuilder.YES
                    json_row = self._get_json_row(app_id)
                    if json_row == ALREADY_USED:
                        exit_with_error('Unexpected duplicate entry for %s' %
                                        app_id)
                    if json_row:
                        json_row['size'] = self._get_installed_size(app_id,
                                                                    version)
                        self._write_csv_row('Installed', app_id, version,
                                            extra, split, json_row)
                    else:
                        warn('Missing content json for installed app %s' % app_id)

        except IOError as err:
            exit_with_error('Could not open apps file %s:\n%s'
                            % (self._args.apps_file, err))

    def _list_available_bundles(self):
        for server_app in self._server_json:
            if server_app['isDiff']:
                # We can ignore delta updates, as there should be a
                # non-delta version as well
                continue
            app_id = server_app['appId']
            base_id = strip_locale(app_id)
            if base_id:
                # App id is localized -- check if our locale matches
                # Skip past the hyphen separating the base from the locale
                app_locale = app_id[len(base_id)+1:]
                if app_locale not in LOCALES[self._args.locale]['app_locales']:
                    continue
            version = server_app['codeVersion']
            size = server_app['installedSize']
            extra = False
            split = False
            json_row = self._get_json_row(app_id)
            if json_row == ALREADY_USED:
                continue
            if json_row:
                # The server may list multiple available app versions
                # We need to check if there is a newer version
                # later in the list that we have not processed yet
                # While technically we only need to process
                # the rest of the list, performance is not critical
                # and it is simpler to just check the full list
                for version_app in self._server_json:
                    if version_app['isDiff']:
                        continue
                    if version_app['appId'] == app_id and \
                       apt_pkg.version_compare(version_app['codeVersion'],
                                               version) > 0:
                        version = version_app['codeVersion']
                        size = version_app['installedSize']
                json_row['size'] = size
                self._write_csv_row('Available', app_id, version,
                                    extra, split, json_row)
            else:
                warn('Missing content json for available app %s' % app_id)

    def generate(self):
        self._open_csv_file()
        self._list_core_apps()
        self._list_installed_bundles()
        self._list_available_bundles()
        self._close_csv_file()
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Generate apps report for a single product (image variant)')

    parser.add_argument('os_version', \
            help='OS version for app server queries (e.g., 2.5.0)')

    parser.add_argument('server', \
            help='App server to query: production, staging, or master') 

    parser.add_argument('arch', \
            help='Platform architecture for app server queries: i386 or armhf')

    parser.add_argument('locale', \
            help='Image locale (e.g., es or es_GT')

    parser.add_argument('packages_file', \
            help='File name of packages.txt file that lists all core packages')

    parser.add_argument('apps_file', \
            help='File name of apps.txt file that lists all app bundles for the image')

    parser.add_argument('--debug', \
            help='Enable debugging output', \
            action='store_true')

    args = AttributeDict(vars(parser.parse_args()))

    Reporter(args).generate()
