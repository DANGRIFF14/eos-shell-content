#!/usr/bin/python3
# Note: use python3 for direct support of utf-8 strings

# To use this script, you need to have 'endless-apps' in your
# /etc/apt/sources.list (and then 'sudo apt-get update')

import apt
import argparse
import csv
import os
import sys

GITHUB_RENAMES = {'eos-shell': 'eos-desktop',
                  'gdm3': 'gdm',
                  'glib2.0': 'glib',
                  'gnome-desktop3': 'gnome-desktop',
                  'gtk+3.0': 'gtk',
                  'modemmanager': 'ModemManager',
                  'webkit2gtk': 'WebKit'}

OBS_CLOSED_SOURCE = {'linux-firmware',
                     'mali400-drivers-x11'}

DOC_DIR = '/usr/share/doc'
APP_DIR = '/endless'

ARCHS = {'i386', 'armhf'}

class Color:
    GREEN = '\033[1;32m'
    BLUE = '\033[1;34m'
    YELLOW = '\033[1;33m'
    RED = '\033[1;31m'
    END = '\033[0m'

def get_color_str(text, color):
    return color + str(text) + Color.END

class AttributeDict(dict):
    def __getattr__(self, attr):
        return self[attr]
    def __setattr__(self, attr, value):
        self[attr] = value

def make_attribute_dicts(dicts):
    attribute_dicts = []
    for d in dicts:
        attribute_dicts.append(AttributeDict(d))
    return attribute_dicts

def warn(message):
    print(get_color_str(message, Color.YELLOW), file=sys.stderr)
    
def exit_with_error(message):
    print(get_color_str(message, Color.RED), file=sys.stderr)
    print('Terminating early', file=sys.stderr)
    exit(1)

class Reporter(object):
    def __init__(self, args):
        # Keep a copy of the arguments dictionary
        self._args = args

        # Check the version number format
        ver = self._args.os_version.split('.')
        if len(ver) != 3 \
           or not ver[0].isdigit() \
           or not ver[1].isdigit() \
           or not ver[2].isdigit():
            exit_with_error('Invalid OS version number: %s (should be x.y.z)' %
                            self._args.os_version)

        # Check the architecture format
        if self._args.arch not in ARCHS:
            exit_with_error('Unsupported arch: %s' % self._args.arch)

        # Parse the repo list
        self._repos = {}
        with open(self._args.repos_file) as f:
            for line in f:
                repo, privacy = line.split()
                self._repos[repo] = privacy

        # Initialize the apt cache
        self._cache = apt.Cache()

    def _print_debug(self, message):
        if self._args.debug:
            print(message)

    def _open_csv_files(self):
        csv_filename = 'packages-list-%s-%s.csv' % (
            self._args.os_version, self._args.arch)
        self._print_debug('Starting CSV output file: %s' % csv_filename)
        self._csv_packages_file = open(csv_filename, 'w', newline='')
        self._csv_packages_writer = csv.writer(
            self._csv_packages_file, lineterminator='\n')
        csv_header = []
        csv_header.append('Package')
        csv_header.append('Version')
        csv_header.append('Source')
        csv_header.append('Repo')
        csv_header.append('Privacy')
        csv_header.append('Summary')
        self._csv_packages_writer.writerow(csv_header)

        csv_filename = 'copyrights-list-%s-%s.csv' % (
            self._args.os_version, self._args.arch)
        self._print_debug('Starting CSV output file: %s' % csv_filename)
        self._csv_copyrights_file = open(csv_filename, 'w', newline='')
        self._csv_copyrights_writer = csv.writer(
            self._csv_copyrights_file, lineterminator='\n')
        csv_header = []
        csv_header.append('Type')
        csv_header.append('Package')
        csv_header.append('Version')
        csv_header.append('Repo')
        csv_header.append('Privacy')
        csv_header.append('Summary')
        csv_header.append('Description')
        csv_header.append('Copyright')
        self._csv_copyrights_writer.writerow(csv_header)

    def _close_csv_files(self):
        self._csv_packages_file.close()
        self._csv_copyrights_file.close()

    def _write_csv_row(self, app_id, package, version):
        if package in self._cache:
            apt_version = self._cache[package].versions[0]
            source = apt_version.source_name
            summary = apt_version.summary
            description = apt_version.description
        else:
            warn('Package not in apt cache: ' + package)
            return

        try:
            if app_id:
                copyright_path = os.path.join(APP_DIR, app_id, 'share', 'doc',
                                              package, 'copyright')
            else:
                copyright_path = os.path.join(DOC_DIR, package, 'copyright')
            with open(copyright_path) as f:
                copyright_text = f.read()
        except:
            warn('Missing copyright for ' + package)
            copyright_text = 'Missing!!!'

        if source in GITHUB_RENAMES:
            repo = GITHUB_RENAMES[source]
        elif source in self._repos:
            repo = source
        else:
            repo = 'OBS'

        if repo == 'OBS':
            privacy = 'closed' if source in OBS_CLOSED_SOURCE else 'open'
        else:
            privacy = 'closed' if self._repos[repo] == 'private' else 'open'

        if not app_id:
            csv_row = []
            csv_row.append(package)
            csv_row.append(version)
            csv_row.append(source)
            csv_row.append(repo)
            csv_row.append(privacy)
            csv_row.append(summary)
            self._csv_packages_writer.writerow(csv_row)

        if app_id or 'Endless Mobile' in copyright_text:
            csv_row = []
            csv_row.append('app' if app_id else 'core')
            csv_row.append(package)
            csv_row.append(version)
            csv_row.append(repo)
            csv_row.append(privacy)
            csv_row.append(summary)
            csv_row.append(description)
            csv_row.append(copyright_text)
            self._csv_copyrights_writer.writerow(csv_row)

    def _list_packages(self):
        # Read in the list of core packages
        app_id = None
        if not self._args.packages_file.endswith('packages.txt'):
            exit_with_error('Packages file name %s does not end with '
                            'packages.txt' % self._args.packages_file)
        try:
            with open(self._args.packages_file, 'r') as f:
                for line in f:
                    data = line.split()
                    # Ignore suffixes like ':i386' in the package name
                    package = data[0].split(':')[0]
                    version = data[1]
                    self._write_csv_row(app_id, package, version)

        except IOError as err:
            exit_with_error('Could not open packages file %s:\n%s'
                            % (self._args.packages_file, err))

    def _list_apps(self):
        # Read in the list of apps
        if not self._args.apps_file.endswith('apps.txt'):
            exit_with_error('Apps file name %s does not end with apps.txt' %
                            self._args.apps_file)
        try:
            with open(self._args.apps_file, 'r') as f:
                for line in f:
                    data = line.split()
                    app_id = data[0]
                    version = data[1]
                    # We only include selected Endless apps
                    # in the copyright list
                    # Exclude knowledge apps (those that contain a '-'
                    # for the language specification), as their content
                    # is not copyrighted by Endless, and the core runtime
                    # component is covered by the eos-knowledge-lib package
                    if app_id.startswith('com.endlessm.') and '-' not in app_id:
                        package = 'eos-' + app_id.split('com.endlessm.')[1]
                        self._write_csv_row(app_id, package, version)

        except IOError as err:
            exit_with_error('Could not open apps file %s:\n%s'
                            % (self._args.apps_file, err))

    def generate(self):
        self._open_csv_files()
        self._list_packages()
        self._list_apps()
        self._close_csv_files()
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Generate report of all core packages for a single product (image variant)')

    parser.add_argument('os_version', \
            help='OS version for report name (e.g., 2.5.0)')

    parser.add_argument('arch', \
            help='Platform architecture for report name: i386 or armhf')

    parser.add_argument('packages_file', \
            help='File name of packages.txt file that lists all core packages')

    parser.add_argument('apps_file', \
            help='File name of apps.txt file that lists all app bundles for the image')

    parser.add_argument('repos_file', \
            help='File name of cm_repo_list_all.txt file that lists all github repos with privacy (normally found in eos-build repo)')

    parser.add_argument('--debug', \
            help='Enable debugging output', \
            action='store_true')

    args = AttributeDict(vars(parser.parse_args()))

    Reporter(args).generate()
