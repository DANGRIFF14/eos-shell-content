#!/usr/bin/gjs
// -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-

// Script to save the current icon grid layout as a JSON file
// in the user's Documents folder
//
// Usage:
//   eos-save-icon-grid [default | <personality>]
//
// For example:
//   eos-save-icon-grid            -- prompts user to select personality
//   eos-save-icon-grid default    -- save as icon-grid-default.json
//   eos-save-icon-grid Brazil     -- save as icon-grid-Brazil.json

const Gio = imports.gi.Gio;
const GLib = imports.gi.GLib;
const Json = imports.gi.Json;

const INSTALL_PATH = '@DATA_DIR@';
const SAVE_PATH = GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DOCUMENTS);
const SHELL_SCHEMA = 'org.gnome.shell';
const SCHEMA_KEY = 'icon-grid-layout';

const selectPersonality = function() {
    let command = 'zenity --list --title="Desktop configuration to save" --text="Select an option and hit OK" --radiolist --hide-header --column=button --column=selection TRUE default';

    let path = INSTALL_PATH + '/EndlessOS/personality-defaults';
    let dir = Gio.File.new_for_path(path);

    let files;
    try {
        files = dir.enumerate_children('standard::name,standard::type',
                                       Gio.FileQueryInfoFlags.NONE, null);
    } catch (e) {
        logError(e, 'Missing personality configuration files in ' + path);
        return null;
    }

    let file = files.next_file(null);

    while (file) {
        let name = file.get_name();
        // Example: icon-grid-Brazil.json
        let tokens = name.match(/^icon-grid-(.*).json$/);
        if (tokens !== null) {
            let option = tokens[1];
            if (option != 'default') {
                command += ' FALSE ' + option;
            }
        }
        file = files.next_file(null);
    }

    let response;
    try {
        response = GLib.spawn_command_line_sync(command);
    } catch (e) {
        logError(e, 'Error executing \'' + localizedExec + '\'');
        return null;
    }

    const STATUS = 3;
    const SELECTION = 1;
    let status = response[STATUS];
    let personality;
    if (status == 0) {
        // User hit OK
        let selection = response[SELECTION];
        // Convert to string and trim the new line
        personality = String(selection).trim();
    } else {
        // User canceled
        personality = null;
    }
    return personality;
}
    
const getPersonality = function(args) {
    let personality;
    if (args.length == 0) {
        personality = selectPersonality();
    } else if (args.length == 1) {
        personality = args[0];
    } else {
        throw new Error('Invalid command-line: only 0 or 1 argument allowed');
    }
    return personality;
}

let personality = getPersonality(ARGV);

if (personality) {
    let settings = new Gio.Settings({ schema: SHELL_SCHEMA });
    let layout = settings.get_value(SCHEMA_KEY);
    let jsonLayout = Json.gvariant_serialize(layout);
    let jsonGenerator = new Json.Generator({ root: jsonLayout,
                                             pretty: true });
    let file = GLib.build_filenamev([SAVE_PATH,
                                     'icon-grid-' + personality + '.json']);
    jsonGenerator.to_file(file);
}
